{"_id": "PVFormMacro", "name": "Form Party", "type": "script", "author": null, "img": "icons/svg/users.svg", "scope": "global", "command": "// MACRO: Form Party (Enhanced with Customization)\nconst selectedTokens = canvas.tokens.controlled;\n\nif (selectedTokens.length < 1) {\n  return ui.notifications.warn(\"Please select one or more player tokens to form a party.\");\n}\n\n// Check if tokens have actors\nconst tokensWithActors = selectedTokens.filter(t => t.actor);\nif (tokensWithActors.length === 0) {\n  return ui.notifications.error(\"Selected tokens have no linked actors!\");\n}\n\nif (tokensWithActors.length < selectedTokens.length) {\n  ui.notifications.warn(`${selectedTokens.length - tokensWithActors.length} token(s) skipped (no actor).`);\n}\n\n// Get member names for display\nconst memberNames = tokensWithActors.map(t => t.name).join(\", \");\n\n// Show customization dialog\nnew Dialog({\n  title: \"Form Party\",\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Party Name:</label>\n        <input type=\"text\" name=\"partyName\" value=\"The Party\" style=\"width: 100%;\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>Party Token Image:</label>\n        <input type=\"text\" name=\"tokenImage\" value=\"icons/svg/users.svg\" style=\"width: 100%;\"/>\n        <button type=\"button\" id=\"browse-image\" style=\"margin-top: 4px;\">Browse...</button>\n      </div>\n      <div class=\"form-group\" style=\"margin-top: 10px; padding: 8px; background: #f0f0f0; border-radius: 4px;\">\n        <strong>Members:</strong> ${memberNames}\n      </div>\n    </form>\n  `,\n  buttons: {\n    form: {\n      label: \"Form Party\",\n      callback: async (html) => {\n        const partyName = html.find('[name=\"partyName\"]').val() || \"The Party\";\n        const tokenImage = html.find('[name=\"tokenImage\"]').val() || \"icons/svg/users.svg\";\n        \n        const gridSize = canvas.scene.grid.size;\n\n        // Find max dimensions and average center\n        let maxWidth = 1;\n        let maxHeight = 1;\n        let sumX = 0;\n        let sumY = 0;\n\n        for (const token of tokensWithActors) {\n          sumX += token.center.x;\n          sumY += token.center.y;\n          if (token.document.width > maxWidth) maxWidth = token.document.width;\n          if (token.document.height > maxHeight) maxHeight = token.document.height;\n        }\n\n        const avgX = sumX / tokensWithActors.length;\n        const avgY = sumY / tokensWithActors.length;\n\n        // Build member data\n        const partyMembers = tokensWithActors.map(token => {\n          const deltaX = token.center.x - avgX;\n          const deltaY = token.center.y - avgY;\n          const gridX = Math.round(deltaX / gridSize);\n          const gridY = Math.round(deltaY / gridSize);\n          return { \n            actorId: token.actor.id, \n            dx: gridX, \n            dy: gridY,\n            name: token.name  // Store name for reference\n          };\n        });\n\n        // Use average position (snapped to grid) instead of first token\n        const snapX = Math.round(avgX / gridSize) * gridSize;\n        const snapY = Math.round(avgY / gridSize) * gridSize;\n\n        const partyTokenData = {\n          name: partyName,\n          x: snapX,\n          y: snapY,\n          texture: { src: tokenImage },\n          width: maxWidth,\n          height: maxHeight,\n          sight: {\n            enabled: true,\n            range: 0,\n            angle: 360,\n            visionMode: \"basic\"\n          },\n          displayName: CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n          actorLink: false,\n          disposition: CONST.TOKEN_DISPOSITIONS.FRIENDLY,\n          flags: { \n            \"party-vision\": { \n              \"memberData\": partyMembers,\n              \"lastFacing\": -Math.PI / 2  // Default: North\n            } \n          }\n        };\n\n        await canvas.scene.createEmbeddedDocuments(\"Token\", [partyTokenData]);\n        await canvas.scene.deleteEmbeddedDocuments(\"Token\", tokensWithActors.map(t => t.id));\n\n        ui.notifications.info(`${partyName} formed with ${partyMembers.length} members!`);\n      }\n    },\n    cancel: { label: \"Cancel\" }\n  },\n  default: \"form\",\n  render: (html) => {\n    // Add file picker functionality\n    html.find('#browse-image').on('click', () => {\n      new FilePicker({\n        type: \"image\",\n        callback: (path) => {\n          html.find('[name=\"tokenImage\"]').val(path);\n        }\n      }).browse();\n    });\n  }\n}).render(true);\n", "folder": null, "sort": 0, "ownership": {"default": 0}, "flags": {}, "_stats": {"systemId": null, "systemVersion": null, "coreVersion": null, "createdTime": null, "modifiedTime": null, "lastModifiedBy": null}}
{"_id": "PVDeployMacro", "name": "Deploy Party", "type": "script", "author": null, "img": "icons/svg/users-slash.svg", "scope": "global", "command": "// MACRO: Deploy Party (Enhanced with Formations)\n\nconst partyToken = canvas.tokens.controlled[0];\nif (!partyToken) {\n  return ui.notifications.warn(\"Please select the Party Token to deploy.\");\n}\n\nconst memberData = partyToken.document.getFlag(\"party-vision\", \"memberData\");\nif (!memberData) {\n  return ui.notifications.warn(\"This is not a valid Party Token.\");\n}\n\nconst lastFacing = partyToken.document.getFlag(\"party-vision\", \"lastFacing\") || (-Math.PI / 2);\nconst formations = window.PartyVision?.FORMATION_PRESETS || {};\n\n// Build formation options HTML\nconst formationOptions = Object.entries(formations).map(([key, preset]) => \n  `<div class=\"formation-option\" data-formation=\"${key}\">\n    <strong>${preset.name}</strong>\n    <div style=\"font-size: 0.8em; color: #999;\">${preset.description}</div>\n  </div>`\n).join('');\n\n// Determine default direction from lastFacing\nlet defaultDir = 'north';\nif (Math.abs(lastFacing - 0) < 0.1) defaultDir = 'east';\nelse if (Math.abs(lastFacing - Math.PI/2) < 0.1) defaultDir = 'south';\nelse if (Math.abs(lastFacing - Math.PI) < 0.1) defaultDir = 'west';\n\nnew Dialog({\n  title: \"Deploy Party\",\n  content: `\n    <div class=\"party-vision-dialog\">\n      <h3>Formation</h3>\n      <div class=\"formation-preview\">\n        ${formationOptions || '<div class=\"formation-option\" data-formation=\"standard\"><strong>Standard</strong></div>'}\n      </div>\n      <h3>Direction</h3>\n      <div class=\"direction-grid\">\n        <div class=\"direction-btn empty\"></div>\n        <div class=\"direction-btn\" data-direction=\"north\" title=\"North\">\n          <i class=\"fas fa-arrow-up\"></i>\n        </div>\n        <div class=\"direction-btn empty\"></div>\n        <div class=\"direction-btn\" data-direction=\"west\" title=\"West\">\n          <i class=\"fas fa-arrow-left\"></i>\n        </div>\n        <div class=\"direction-btn empty\"></div>\n        <div class=\"direction-btn\" data-direction=\"east\" title=\"East\">\n          <i class=\"fas fa-arrow-right\"></i>\n        </div>\n        <div class=\"direction-btn empty\"></div>\n        <div class=\"direction-btn\" data-direction=\"south\" title=\"South\">\n          <i class=\"fas fa-arrow-down\"></i>\n        </div>\n        <div class=\"direction-btn empty\"></div>\n      </div>\n    </div>\n  `,\n  buttons: {\n    deploy: {\n      label: \"Deploy\",\n      callback: async (html) => {\n        const selectedFormation = html.find('.formation-option.selected').data('formation') || 'standard';\n        const selectedDirection = html.find('.direction-btn.selected').data('direction') || defaultDir;\n        \n        const directionMap = {\n          north: -Math.PI / 2,\n          east: 0,\n          south: Math.PI / 2,\n          west: Math.PI\n        };\n        \n        const radians = directionMap[selectedDirection];\n        \n        // Save the facing for next time\n        await partyToken.document.setFlag('party-vision', 'lastFacing', radians);\n        \n        // Deploy using the helper function\n        if (window.PartyVision?.deployParty) {\n          await window.PartyVision.deployParty(partyToken, radians);\n        } else {\n          ui.notifications.error('Party Vision module not fully loaded!');\n        }\n      }\n    },\n    cancel: { label: \"Cancel\" }\n  },\n  default: \"deploy\",\n  render: (html) => {\n    // Make formation options selectable\n    html.find('.formation-option').on('click', function() {\n      html.find('.formation-option').removeClass('selected');\n      $(this).addClass('selected');\n    });\n    \n    // Make direction buttons selectable\n    html.find('.direction-btn:not(.empty)').on('click', function() {\n      html.find('.direction-btn').removeClass('selected');\n      $(this).addClass('selected');\n    });\n    \n    // Select default formation and direction\n    html.find('.formation-option').first().addClass('selected');\n    html.find(`.direction-btn[data-direction=\"${defaultDir}\"]`).addClass('selected');\n  }\n}).render(true);\n", "folder": null, "sort": 0, "ownership": {"default": 0}, "flags": {}, "_stats": {"systemId": null, "systemVersion": null, "coreVersion": null, "createdTime": null, "modifiedTime": null, "lastModifiedBy": null}}
